<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode | I'm Ricky -- 个人主页]]></title>
  <link href="http://rickytan.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://rickytan.github.io/"/>
  <updated>2015-04-25T13:27:28+08:00</updated>
  <id>http://rickytan.github.io/</id>
  <author>
    <name><![CDATA[Ricky]]></name>
    <email><![CDATA[ricky.tan.xin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自动生成低清图的 Xcode 插件]]></title>
    <link href="http://rickytan.github.io/blog/2015/01/17/rtimageassets/"/>
    <updated>2015-01-17T00:02:00+08:00</updated>
    <id>http://rickytan.github.io/blog/2015/01/17/rtimageassets</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>随着 iPhone 6 Plus 等的发布，在普通消费者眼中，又要少两个肾，在 <strong>iOS</strong> 开发者眼中，又有两款新屏幕需要支持了。新的 iPhone 6 Plus 拥有一块 5.5 英寸的视网膜屏，分辨率为 <code>1080x1920</code>，<strong>PPI</strong> 为 401，在程序中表现为 <strong>3x</strong>，即，对于一张代码中指定的 <code>100x100</code> 的图片，实际需要 <code>300*300</code> 的图片填充才不会产生模糊。为此开发者们及美术们又要伤不少脑筋了，开发者需要一遍又一遍地向美术解释，每张图需要切三份，每份应该怎么样。有时候少切了，或者不满足要求，程序员还得自己动手缩放。</p>

<p>程序员总是懒的，于是我做了一个 <code>Xcode</code> 插件来完成此事：<a href="https://github.com/rickytan/RTImageAssets">RTImageAssets</a></p>

<!--more-->


<blockquote><h2>简介</h2>

<p>本项目是一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本，只要拖拽高清图到 @3x 的位置上，然后按 Ctrl+Shift+A 即可自动生成两张低清的补全空位。当然你也可以从 @2x 的图生成 @3x 版本，如果你对图片质量要求不高的话。</p>

<h2>特性</h2>

<ul>
<li>只会填补空位，如果你已经设置好了自己的 @2x 图，则不会生成；</li>
<li>自动重命名，保持项目干净（把 N.imageset 下的图片名字改为 N.png <a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#78;&#64;&#50;&#120;&#x2e;&#112;&#110;&#x67;">&#x4e;&#64;&#50;&#120;&#46;&#112;&#110;&#x67;</a> <a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x4e;&#64;&#x33;&#x78;&#x2e;&#x70;&#x6e;&#x67;">&#78;&#x40;&#x33;&#120;&#46;&#x70;&#110;&#x67;</a> 等）；</li>
<li>使用简单，不用再麻烦美术同学缩放了；</li>
</ul>


<p><strong>注意：</strong>本插件从 @3x 到 @2x 的缩放保证图片在屏幕上显示的物理尺寸一样，而不是与屏幕比例一样，缩放系数是 1.5，而不是 1242 / 640 = 1.94。</p></blockquote>

<p>更多信息，请移步：<a href="https://github.com/rickytan/RTImageAssets">https://github.com/rickytan/RTImageAssets</a></p>

<h2>安装</h2>

<p>你可以从源码构建安装（推荐）：</p>

<pre><code>git clone https://github.com/rickytan/RTImageAssets.git
</code></pre>

<p>或者运行如下命令安装 <code>Xcode</code> 插件管理器（官网：<a href="http://alcatraz.io/">http://alcatraz.io/</a>）：</p>

<pre><code>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh
</code></pre>

<p>搜索：<code>RTImageAssets</code></p>

<p>本插件还在不断完善之中，并在不久后会加入自动生成所有 <strong>Icon</strong> 的功能，欢迎各位测试吐槽！如有任何问题，请到 <a href="https://github.com/rickytan/RTImageAssets/issues">https://github.com/rickytan/RTImageAssets/issues</a> 创建 <strong>Issue</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 6 默认不再构建 armv7s 指令集的代码]]></title>
    <link href="http://rickytan.github.io/blog/2015/01/16/xcode-6-drops-armv7s/"/>
    <updated>2015-01-16T11:21:00+08:00</updated>
    <id>http://rickytan.github.io/blog/2015/01/16/xcode-6-drops-armv7s</id>
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="http://www.cocoanetics.com/2014/10/xcode-6-drops-armv7s/">Xcode 6 drops armv7s</a></p></blockquote>

<p>最新的 <code>Xcode</code> 默认已经不再为 <code>armv7s</code> 构建可执行代码了，这到底是计划之中还是一时疏忽？</p>

<p>当前最新版 <code>Xcode 6</code> 已经将 <code>${ARCHS_STANDARD}</code> 定义为 <code>armv7</code> 和 <code>arm64</code> 了，同时当你更新 <code>Xcode</code> 时它会不断提醒你删除你自己的定义，让 <code>Xcode</code> 帮你做决定。而在你不堪骚扰按它的做之后，你会发现你的项目不再构建 <code>armv7s</code> 的代码了。</p>

<p><code>armv7s</code> 的指令集运行于 Apple A6 （iPhone 5）和 Apple A6X （iPad 4）CPU 上。接下来的 Apple A7 （iPhone 5S，iPad Air，iPad Mini Retina）已经使用了 64 位的 <code>arm64</code> 架构。</p>

<!--more-->


<p>当苹果在 <code>Xcode</code> 中加入 <code>armv7s</code> 的支持后，它让许多使用了第三方的二进制库，如 Google Analytics，的开发者困惑了很久。为了构建应用，链接器需要所有链接的外部库包含相同的架构。开发者们不得不从他们的应用中移除 <code>armv7s</code> 的支持，而第三方库需要更新他们的二进制代码以添加新架构的支持。</p>

<p>这并不是一个真的问题，因为尽管少了一些优化，但 A6 芯片还是可以很好地运行 <code>armv7</code> 的代码。只是你升级了 <code>Xcode</code> 之后，原来好好的代码突然出现链接错误会让你很不爽而已。</p>

<p><img src="/images/Screen-Shot-2014-10-10-at-10.42.32.png" alt="Image0" /></p>

<p>修复方法也很简单。作为一个应用开发者，你可以简单地按照 <code>Xcode</code> 的建议删掉你自己覆写的编译架构设置。如果设置是以<strong>粗体</strong>显示的，你可以按下 <code>CMD + delete</code> 让它回到项目推荐设置。</p>

<p>作为一个组件的开发商，你需要采用其他途径。你想要开发者自行决定是否支持 <code>armv7s</code>，那么你应该在你所有的静态库及 <strong>Framework</strong> 中加入 <code>armv7s</code> 的支持。</p>

<p><img src="/images/Screen-Shot-2014-10-10-at-10.49.50.png" alt="Image1" /></p>

<p>开发者的链接器会自动选择所需的架构片断，用以生成应用。如果你设置了 <strong>Build Active Architecture Only</strong> 你会发现只有特定的架构包含进去了。<strong>Debug</strong> 编译时，这个设置默认为 <strong>YES</strong>，它只会生成当前活动的设备或模拟器的架构代码以加快编译速度。<strong>Release</strong> 编译时默认为 <strong>NO</strong>，所有指定的架构都会生成。</p>

<p>在静态库的生成日志中，每一行是一个架构的编译命令，最后是一行将所有架构代码合并，生成一个大的二进制文件。</p>

<p><img src="/images/Screen-Shot-2014-10-10-at-10.53.48.png" alt="Image2" /></p>

<p>另一种检验库文件中包含的架构片断的方法是使用 <code>file</code> 命令：</p>

<p><code>
file libBarCodeKit.a
libBarCodeKit.a: Mach-O universal binary with 3 architectures
libBarCodeKit.a (for architecture armv7):   current ar archive random library
libBarCodeKit.a (for architecture arm64):   current ar archive random library
libBarCodeKit.a (for architecture armv7s):  current ar archive random library
</code></p>

<p>这个库包含所有的移动架构的代码。如果你要生成一个静态的 <strong>Framework</strong> 或者是通用的静态库做为二进制包发布你甚至还要包含模拟器的架构，如下所示：</p>

<p><code>
file DTRichTextEditor
DTRichTextEditor: Mach-O universal binary with 5 architectures
DTRichTextEditor (for architecture armv7):  current ar archive random library
DTRichTextEditor (for architecture armv7s): current ar archive random library
DTRichTextEditor (for architecture arm64):  current ar archive random library
DTRichTextEditor (for architecture i386):   current ar archive random library
DTRichTextEditor (for architecture x86_64): current ar archive random library
</code></p>

<p>总而言之，苹果再一次将我们推向指定的方向：停止支持 <code>armv7s</code>。这个架构目前已经被两代新产品的更强大的 64 位 CPU 取代。但是，作为组件开发商，我相信我们仍然需要加入 <code>armv7s</code> 的支持而将选择权交给应用开发者。</p>
]]></content>
  </entry>
  
</feed>
