<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | I'm Ricky -- 个人主页]]></title>
  <link href="http://rickytan.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://rickytan.github.io/"/>
  <updated>2015-04-25T13:27:28+08:00</updated>
  <id>http://rickytan.github.io/</id>
  <author>
    <name><![CDATA[Ricky]]></name>
    <email><![CDATA[ricky.tan.xin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自动生成低清图的 Xcode 插件]]></title>
    <link href="http://rickytan.github.io/blog/2015/01/17/rtimageassets/"/>
    <updated>2015-01-17T00:02:00+08:00</updated>
    <id>http://rickytan.github.io/blog/2015/01/17/rtimageassets</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>随着 iPhone 6 Plus 等的发布，在普通消费者眼中，又要少两个肾，在 <strong>iOS</strong> 开发者眼中，又有两款新屏幕需要支持了。新的 iPhone 6 Plus 拥有一块 5.5 英寸的视网膜屏，分辨率为 <code>1080x1920</code>，<strong>PPI</strong> 为 401，在程序中表现为 <strong>3x</strong>，即，对于一张代码中指定的 <code>100x100</code> 的图片，实际需要 <code>300*300</code> 的图片填充才不会产生模糊。为此开发者们及美术们又要伤不少脑筋了，开发者需要一遍又一遍地向美术解释，每张图需要切三份，每份应该怎么样。有时候少切了，或者不满足要求，程序员还得自己动手缩放。</p>

<p>程序员总是懒的，于是我做了一个 <code>Xcode</code> 插件来完成此事：<a href="https://github.com/rickytan/RTImageAssets">RTImageAssets</a></p>

<!--more-->


<blockquote><h2>简介</h2>

<p>本项目是一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本，只要拖拽高清图到 @3x 的位置上，然后按 Ctrl+Shift+A 即可自动生成两张低清的补全空位。当然你也可以从 @2x 的图生成 @3x 版本，如果你对图片质量要求不高的话。</p>

<h2>特性</h2>

<ul>
<li>只会填补空位，如果你已经设置好了自己的 @2x 图，则不会生成；</li>
<li>自动重命名，保持项目干净（把 N.imageset 下的图片名字改为 N.png <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#x4e;&#x40;&#50;&#120;&#46;&#112;&#110;&#x67;">&#78;&#x40;&#50;&#120;&#x2e;&#112;&#110;&#103;</a> <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x4e;&#64;&#x33;&#x78;&#x2e;&#112;&#x6e;&#x67;">&#x4e;&#64;&#x33;&#x78;&#46;&#x70;&#110;&#103;</a> 等）；</li>
<li>使用简单，不用再麻烦美术同学缩放了；</li>
</ul>


<p><strong>注意：</strong>本插件从 @3x 到 @2x 的缩放保证图片在屏幕上显示的物理尺寸一样，而不是与屏幕比例一样，缩放系数是 1.5，而不是 1242 / 640 = 1.94。</p></blockquote>

<p>更多信息，请移步：<a href="https://github.com/rickytan/RTImageAssets">https://github.com/rickytan/RTImageAssets</a></p>

<h2>安装</h2>

<p>你可以从源码构建安装（推荐）：</p>

<pre><code>git clone https://github.com/rickytan/RTImageAssets.git
</code></pre>

<p>或者运行如下命令安装 <code>Xcode</code> 插件管理器（官网：<a href="http://alcatraz.io/">http://alcatraz.io/</a>）：</p>

<pre><code>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh
</code></pre>

<p>搜索：<code>RTImageAssets</code></p>

<p>本插件还在不断完善之中，并在不久后会加入自动生成所有 <strong>Icon</strong> 的功能，欢迎各位测试吐槽！如有任何问题，请到 <a href="https://github.com/rickytan/RTImageAssets/issues">https://github.com/rickytan/RTImageAssets/issues</a> 创建 <strong>Issue</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 6 默认不再构建 armv7s 指令集的代码]]></title>
    <link href="http://rickytan.github.io/blog/2015/01/16/xcode-6-drops-armv7s/"/>
    <updated>2015-01-16T11:21:00+08:00</updated>
    <id>http://rickytan.github.io/blog/2015/01/16/xcode-6-drops-armv7s</id>
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="http://www.cocoanetics.com/2014/10/xcode-6-drops-armv7s/">Xcode 6 drops armv7s</a></p></blockquote>

<p>最新的 <code>Xcode</code> 默认已经不再为 <code>armv7s</code> 构建可执行代码了，这到底是计划之中还是一时疏忽？</p>

<p>当前最新版 <code>Xcode 6</code> 已经将 <code>${ARCHS_STANDARD}</code> 定义为 <code>armv7</code> 和 <code>arm64</code> 了，同时当你更新 <code>Xcode</code> 时它会不断提醒你删除你自己的定义，让 <code>Xcode</code> 帮你做决定。而在你不堪骚扰按它的做之后，你会发现你的项目不再构建 <code>armv7s</code> 的代码了。</p>

<p><code>armv7s</code> 的指令集运行于 Apple A6 （iPhone 5）和 Apple A6X （iPad 4）CPU 上。接下来的 Apple A7 （iPhone 5S，iPad Air，iPad Mini Retina）已经使用了 64 位的 <code>arm64</code> 架构。</p>

<!--more-->


<p>当苹果在 <code>Xcode</code> 中加入 <code>armv7s</code> 的支持后，它让许多使用了第三方的二进制库，如 Google Analytics，的开发者困惑了很久。为了构建应用，链接器需要所有链接的外部库包含相同的架构。开发者们不得不从他们的应用中移除 <code>armv7s</code> 的支持，而第三方库需要更新他们的二进制代码以添加新架构的支持。</p>

<p>这并不是一个真的问题，因为尽管少了一些优化，但 A6 芯片还是可以很好地运行 <code>armv7</code> 的代码。只是你升级了 <code>Xcode</code> 之后，原来好好的代码突然出现链接错误会让你很不爽而已。</p>

<p><img src="/images/Screen-Shot-2014-10-10-at-10.42.32.png" alt="Image0" /></p>

<p>修复方法也很简单。作为一个应用开发者，你可以简单地按照 <code>Xcode</code> 的建议删掉你自己覆写的编译架构设置。如果设置是以<strong>粗体</strong>显示的，你可以按下 <code>CMD + delete</code> 让它回到项目推荐设置。</p>

<p>作为一个组件的开发商，你需要采用其他途径。你想要开发者自行决定是否支持 <code>armv7s</code>，那么你应该在你所有的静态库及 <strong>Framework</strong> 中加入 <code>armv7s</code> 的支持。</p>

<p><img src="/images/Screen-Shot-2014-10-10-at-10.49.50.png" alt="Image1" /></p>

<p>开发者的链接器会自动选择所需的架构片断，用以生成应用。如果你设置了 <strong>Build Active Architecture Only</strong> 你会发现只有特定的架构包含进去了。<strong>Debug</strong> 编译时，这个设置默认为 <strong>YES</strong>，它只会生成当前活动的设备或模拟器的架构代码以加快编译速度。<strong>Release</strong> 编译时默认为 <strong>NO</strong>，所有指定的架构都会生成。</p>

<p>在静态库的生成日志中，每一行是一个架构的编译命令，最后是一行将所有架构代码合并，生成一个大的二进制文件。</p>

<p><img src="/images/Screen-Shot-2014-10-10-at-10.53.48.png" alt="Image2" /></p>

<p>另一种检验库文件中包含的架构片断的方法是使用 <code>file</code> 命令：</p>

<p><code>
file libBarCodeKit.a
libBarCodeKit.a: Mach-O universal binary with 3 architectures
libBarCodeKit.a (for architecture armv7):   current ar archive random library
libBarCodeKit.a (for architecture arm64):   current ar archive random library
libBarCodeKit.a (for architecture armv7s):  current ar archive random library
</code></p>

<p>这个库包含所有的移动架构的代码。如果你要生成一个静态的 <strong>Framework</strong> 或者是通用的静态库做为二进制包发布你甚至还要包含模拟器的架构，如下所示：</p>

<p><code>
file DTRichTextEditor
DTRichTextEditor: Mach-O universal binary with 5 architectures
DTRichTextEditor (for architecture armv7):  current ar archive random library
DTRichTextEditor (for architecture armv7s): current ar archive random library
DTRichTextEditor (for architecture arm64):  current ar archive random library
DTRichTextEditor (for architecture i386):   current ar archive random library
DTRichTextEditor (for architecture x86_64): current ar archive random library
</code></p>

<p>总而言之，苹果再一次将我们推向指定的方向：停止支持 <code>armv7s</code>。这个架构目前已经被两代新产品的更强大的 64 位 CPU 取代。但是，作为组件开发商，我相信我们仍然需要加入 <code>armv7s</code> 的支持而将选择权交给应用开发者。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RTID]]></title>
    <link href="http://rickytan.github.io/blog/2014/06/06/rtid/"/>
    <updated>2014-06-06T01:44:00+08:00</updated>
    <id>http://rickytan.github.io/blog/2014/06/06/rtid</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>很多时候我们需要设备的唯一标识符，但自从 <code>iOS 5.0</code> 之后，苹果公司开始限制 <code>[UIDevice currentDevice].uniqueIdentifier</code> 的访问，而现在，这个接口已经被移除，多了一个新的 <code>identifierForVendor</code> 接口。对每个单独的应用，它返回一个唯一的字符串，但是应用删除重装安装后，这个字符串就变了（本人在一个 <code>iOS 6.1.2</code> 越狱设备上测试，可能会有些问题）。这样的话，统计或是作为用户身份登录都会产生问题。</p>

<h3>网卡地址</h3>

<p>读 <code>MAC</code> 地址是个不错的想法<!--more-->，但在目前最新的 <code>iOS 7.0</code> 中返回 <strong>02:00:00:00</strong> ，已经失效。即使是在 <code>iOS 6.0</code> 中，读 <code>MAC</code> 地址也是做为私有接口存在。</p>

<h3>OpenUDID</h3>

<p>这是一个不错的实现，它不依赖 <code>iOS</code> 设备的任何硬件和系统中的 <code>ID</code>，而是随机生成一串字符，并保存在某处。它的限制也很明显，就是当系统升级后，或者所有用到 <code>OpenUDID</code> SDK 的应用都删除了，再安装一个新的用到 <code>OpenUDID</code> 的应用，它返回的 <code>UDID</code> 就变了。</p>

<p>例如，在应用 A 中调用 <code>OpenUDID</code> 接口，返回如下：</p>

<pre><code>3a2ee6eea4d427abcf7e8ce6a0463bfcacf957df
</code></pre>

<p>再安装一个 <em>bundle identifier</em> 不同的应用 B，也返回</p>

<pre><code>3a2ee6eea4d427abcf7e8ce6a0463bfcacf957df
</code></pre>

<p>这时删除 A，返回还是一样。无论关机、重启也好。很大程度上可以保存它是设备的唯一标识。但是这时把 B 也删了了，关机重启，再安装，
就返回一个新的了：</p>

<pre><code>22f76530318d5cdad310dd2d8e89c7c03aebb82b
</code></pre>

<p>这还不算，毕竟用户把所有用到 <code>OpenUDID</code> 的应用全删除可能性不大。问题是，<code>OpenUDID</code> 的实现用到了公共剪切板，而貌似以后苹果将
限制跨应用的剪切板访问，所以最终 <code>OpenUDID</code> 也会失效！</p>

<h2>需求</h2>

<p>我们不一定需要一个设备的唯一标识，我们只要在我们自己的应用中能读到一个<strong>唯一</strong>、<strong>不变</strong>的标识，这样就可以做统计分析，或是<em>无帐号</em>系统的游戏登录（因为有帐号的话，用户很大可能就不去玩了，流失率比较高）。它应该有以下特点：</p>

<ul>
<li>是自己生成的随机串，与系统硬件无关</li>
<li>只生成一次，以后每次打开读到一样的内容</li>
<li>用户删除本应用，然后重装，读到一样的内容</li>
<li>用户升级系统（不是重装系统），仍能读到一样的内容</li>
</ul>


<p>为此，实现了 <code>RTID</code>！</p>

<h2>RTID</h2>

<h3>使用方法</h3>

<p>在你的项目中引入 <code>RTID.h</code>，然后在编译设置中 <code>Other Link Flags</code> 中增加 <code>-ObjC</code>，可能需要添加依赖：</p>

<ul>
<li>Security.framework</li>
</ul>


<p>然后就可以通过以下方式获取一个唯一且不变的 ID：</p>

<pre><code>NSString *rtid = [UIDevice currentDevice].RTID;
</code></pre>

<p>经实测，应用删除后，再重装，此 ID 依然不变。除非，重装系统！</p>

<p><img src="https://github.com/rickytan/RTID/raw/master/Screenshot/s0.png" alt="image" /></p>

<h3>风险</h3>

<p>此实现没有调用苹果的私用接口，但本人仍无法保证用到此代码的应用能顺利上线！如果您用到了，且成功上线了，还请<a href="mailto:ricky.tan.xin@gmail.com?subject=%E6%88%91%E7%9A%84%E5%BA%94%E7%94%A8%E6%88%90%E5%8A%9F%E4%B8%8A%E7%BA%BF">告知</a>一下，谢谢！</p>

<h3>商用</h3>

<p>本项目开源、免费，但如果您在商用软件中用到此代码，请将您的应用下载链接及简介发送到<a href="mailto:ricky.tan.xin@gmail.com?subject=%E6%88%91%E7%94%A8%E5%88%B0%E4%BA%86RTID">此邮箱</a>，本人感激不尽！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码生成的 UIColor 与在 IB 中填写的颜色 RGB 最终颜色不一致的问题]]></title>
    <link href="http://rickytan.github.io/blog/2014/05/26/uicolor-and-colorpicker-in-ib/"/>
    <updated>2014-05-26T14:58:00+08:00</updated>
    <id>http://rickytan.github.io/blog/2014/05/26/uicolor-and-colorpicker-in-ib</id>
    <content type="html"><![CDATA[<p>iOS 应用界面的编写，按程序员的习惯可以分为两派：代码党和 <code>IB</code> 党。本人是倾向于 <code>Interface Builder</code> 的，毕竟能少写点就少写点，能用 <code>IB</code> 实现坚决不用代码。</p>

<p>但是在实际使用中，却发现一些问题，这个问题早有发现，我以为只是色差的原因，但是最近发现不那么简单了。</p>

<p>如下图，美术在 <code>PhotoShop</code> 中标了蓝色为 <code>#3689e5</code>，换成 <code>RGB</code> 为 54，137，229，于是在 <code>IB</code> 的颜色中填入此值，但是看到的颜色有差异。</p>

<p><img src="/images/IB/QQ20140510-1.png" alt="image0" /></p>

<!--more-->


<p><img src="/images/IB/QQ20140510-2.png" alt="image1" /></p>

<p>这点小差异其实一般人都不会太关心，但后来有一部分功能我不想用 <code>IB</code> 了，于是代码写了个界面，就发现颜色差异不能忍了，代码的颜色是对的，<code>IB</code> 的颜色偏深。</p>

<p>自己写了个 Demo ，截图如下：（这里差别还不是很大，因为我是在 Mac Pro Retian 自己的屏上输入的颜色，当你在外接显示器上用 <code>IB</code> 时，颜色差异十分明显）</p>

<p><img src="/images/IB/s0.png" alt="image2" /></p>

<p>其中上半部分是用 Color Inspector 输入的值：</p>

<p><img src="/images/IB/s1.png" alt="image3" /></p>

<p>可以对比下第 2 张图，与上面这张图，第 2 张图是在外接显示器上输入的，颜色差异之大，不可能是由 228 与 229 造成的！</p>

<p>我一再强调了显示器的不同，对，其实看到这里大家已经猜到，这种不同就来自显示器。点开 <code>RGB Sliders</code> 左边的按钮（我之前都不知道它能点的……），可以看到多种显示器配置文件</p>

<p><img src="/images/IB/color-picker.png" alt="image4" /></p>

<p>选择 <code>Generic RGB</code>，然后三个值会变掉，不管它，你自己再改成 54 137 229。这时它在这个显示器上显示的颜色可能与你要的不对，但是运行时，在模拟器上显示的就与代码无差别了！</p>

<p><img src="/images/IB/s3.png" alt="image5" /></p>

<p>可以用 Mac 自带的 <em>数码测色计</em> 来验证，注意要选 <strong>显示原生值</strong>！</p>

<p>个人的理解，每个显示器在制造时就会有色偏，为了纠正这种色偏，在出厂时会调好一个配置文件，指定显示器在显示 240 这个颜色时（打个比方），你应该显示 248 才能让人的眼睛看着是 240，即显示器上显示的颜色是在原生值上纠偏过的，而<em>数码测色计</em>取的的显示器上的原生值，即 248，显示器根本不知道 240 的存在。这就是为什么用取色的方式总有色差了。</p>

<p>附 <a href="http://stackoverflow.com/questions/7488378/weird-colors-in-xcode-interface-builder">StackOverflow</a> 上的链接 <a href="http://stackoverflow.com/questions/7488378/weird-colors-in-xcode-interface-builder">http://stackoverflow.com/questions/7488378/weird-colors-in-xcode-interface-builder</a></p>
]]></content>
  </entry>
  
</feed>
