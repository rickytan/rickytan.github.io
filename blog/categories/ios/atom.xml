<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | I'm Ricky -- 个人主页]]></title>
  <link href="http://rickytan.cn/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://rickytan.cn/"/>
  <updated>2019-03-25T21:43:12+08:00</updated>
  <id>http://rickytan.cn/</id>
  <author>
    <name><![CDATA[Ricky]]></name>
    <email><![CDATA[ricky.tan.xin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何优雅地编写 iOS 第三方库]]></title>
    <link href="http://rickytan.cn/blog/2016/04/17/how-to-write-elegant-thirdpart-ios-library/"/>
    <updated>2016-04-17T10:00:00+08:00</updated>
    <id>http://rickytan.cn/blog/2016/04/17/how-to-write-elegant-thirdpart-ios-library</id>
    <content type="html"><![CDATA[<p><strong>iOS</strong> 经过八年多的发展，已经涌现出诸多优秀的第三方库，但怎样才算是优雅？总体来说，<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> 就十分优雅，而 <a href="https://github.com/BradLarson/GPUImage">GPUImage</a> 就只是可用，而不算优雅。编写优雅的第三方库，就像制作一件精美的艺术品一样，过程让人沉醉，结果令人赏心悦目。否则就是单纯的代码堆积与功能实现，过程像搬砖，完成后也没有成就感。下面就本人的一点经验，分享下如何优雅地封装第三方库。</p>

<!--more-->


<h2>命名</h2>

<p>好的命名规则是一个成功的第三库的开始，然而现实中很许多人随性命名，导致沟通成本上升。事实上命名问题上，苹果有其官方统一的标准，即首字母小写的驼峰式，如：<code>setName:</code>，<code>reloadDataWithName:andEmail:</code> 等，且一般约定在 <strong>getter</strong> 不使用 <code>getName</code>，而直接使用 <code>name</code>。</p>

<h3>属性</h3>

<p>属性的命名最好是能直接表达其意义的英文名词，当然合适的时候添加形容词，如：</p>

<p><code>obj-c
@interface XTUser : NSObject
@property (nonatomic, strong) NSString *fullName;
@property (nonatomic, strong) NSString *firstName, *lastName;
@property (nonatomic, strong) NSString *phoneNumber;
@property (nonatomic, strong) NSString *email;
@end
</code></p>

<p>如果是数组或集合等，用名词的复数形式：</p>

<p><code>obj-c
@interface XTDownloadManager : NSObject
@property (nonatomic, strong) NSArray&lt;NSURL *&gt; *downloadURLs;
@end
</code></p>

<p>表达数量的属性，可以加 <code>numberOfXXX</code>，或 <code>XXXCount</code> 如：</p>

<p><code>obj-c
@interface XTBook : NSObject
@property (nonatomic, assign) NSInteger numberOfPages;
@property (nonatomic, assign) NSInteger pageCount;
@end
</code></p>

<p>表示对象状态的属性，使用英文的<strong>正在进行时</strong>，或<strong>完成时</strong>等可以表示状态的词，如：</p>

<ul>
<li><code>@property (nonatomic, assign) BOOL isClosed;</code> ，已经关闭</li>
<li><code>@property (nonatomic, assing) BOOL isClosing;</code> ，正在关闭</li>
<li><code>@property (nonatomic, assing) BOOL isAvaliable;</code>，目前可用</li>
<li><code>@property (nonatomic, assign) BOOL hasChanged;</code>，已经被改变</li>
</ul>


<p>而以下写法表意是不明确的：</p>

<ul>
<li><del><code>@property (nonatomic, assing) BOOL isClose;</code></del></li>
</ul>


<p>当然，前面的代码还能有更优雅的写法：</p>

<ul>
<li><code>@property (nonatomic, assign, getter=isClosed) BOOL closed;</code></li>
<li><code>@property (nonatomic, assing, getter=isClosing) BOOL closing;</code></li>
<li><code>@property (nonatomic, assing, getter=isAvaliable) BOOL avaliable;</code></li>
<li><code>@property (nonatomic, assign, getter=hasChanged) BOOL changed;</code></li>
</ul>


<h3>枚举</h3>

<p><strong>iOS</strong> 基础类库有着比其它任何官方库都好用的枚举类型，因为在使用过程中没有任何痛苦，也无需查文档，照着它的类型打完然后就有表意明确的自动补全，如 <code>UIKit</code> 中很常用的：</p>

<p>```obj-c
typedef NS_ENUM(NSInteger, UIControlContentHorizontalAlignment) {</p>

<pre><code>UIControlContentHorizontalAlignmentCenter = 0,
UIControlContentHorizontalAlignmentLeft   = 1,
UIControlContentHorizontalAlignmentRight  = 2,
UIControlContentHorizontalAlignmentFill   = 3,
</code></pre>

<p>};</p>

<p>typedef NS_OPTIONS(NSUInteger, UIControlState) {</p>

<pre><code>UIControlStateNormal       = 0,
UIControlStateHighlighted  = 1 &lt;&lt; 0,                  // used when UIControl isHighlighted is set
UIControlStateDisabled     = 1 &lt;&lt; 1,
UIControlStateSelected     = 1 &lt;&lt; 2,                  // flag usable by app (see below)
UIControlStateFocused NS_ENUM_AVAILABLE_IOS(9_0) = 1 &lt;&lt; 3, // Applicable only when the screen supports focus
UIControlStateApplication  = 0x00FF0000,              // additional flags available for application use
UIControlStateReserved     = 0xFF000000               // flags reserved for internal framework use
</code></pre>

<p>};
```</p>

<p>等等。它的特点也很明显，就是</p>

<p><code>c
enum 类型名 {
  类型名+枚举名0 = 枚举值0,
  类型名+枚举名1 = 枚举值1,
  类型名+枚举名2 = 枚举值2,
}
</code></p>

<p>于是有一段时间，本人都想把 <strong>OpenGL</strong> 里那些恶心的宏重写成这样形式（<a href="https://github.com/rickytan/Cocoa-Style-OpenGL">https://github.com/rickytan/Cocoa-Style-OpenGL</a>），如：</p>

<p>```c
CC_ENUM(int, GLUnsignedType) {</p>

<pre><code>GLUnsignedTypeByte  = GL_UNSIGNED_BYTE,
GLUnsignedTypeShort = GL_UNSIGNED_SHORT,
GLUnsignedTypeInt   = GL_UNSIGNED_INT,
</code></pre>

<p>};</p>

<p>CC_ENUM(int, GLDrawMode) {</p>

<pre><code>GLDrawModePoints        = GL_POINTS,
GLDrawModeLines         = GL_LINES,
GLDrawModeLineLoop      = GL_LINE_LOOP,
GLDrawModeLineStrip     = GL_LINE_STRIP,
GLDrawModeTriangles     = GL_TRIANGLES,
GLDrawModeTriangleStrip = GL_TRIANGLE_STRIP,
GLDrawModeTriangleFan   = GL_TRIANGLE_FAN,
GLDrawModeQuads         = GL_QUADS,
GLDrawModeQuadStrip     = GL_QUAD_STRIP,
GLDrawModePolygon       = GL_POLYGON,
</code></pre>

<p>};
```</p>

<p>然而苦于功底有限，同时对 <strong>OpenGL</strong> 底层了解也不够，作罢。</p>

<p>而当前市面上已有的部分厂商并没有按照这个约定来发布 SDK，以致于要不断查看文档才知道如何操作。如一直倍受诟病的鹅厂：</p>

<p>```obj-c
enum QQApiInterfaceReqType
{</p>

<pre><code>EGETMESSAGEFROMQQREQTYPE = 0,   ///&lt; 手Q -&gt; 第三方应用，请求第三方应用向手Q发送消息
ESENDMESSAGETOQQREQTYPE = 1,    ///&lt; 第三方应用 -&gt; 手Q，第三方应用向手Q分享消息
ESHOWMESSAGEFROMQQREQTYPE = 2   ///&lt; 手Q -&gt; 第三方应用，请求第三方应用展现消息中的数据
</code></pre>

<p>};</p>

<p>/<em>*
 QQApi请求消息基类
 </em>/
@interface QQBaseReq : NSObject</p>

<p>/<em>* 请求消息类型，参见\ref QQApiInterfaceReqType </em>/
@property (nonatomic, assign) int type;</p>

<p>@end
```</p>

<p>以上 <strong>SDK</strong> 有三个问题：</p>

<ol>
<li><code>QQBaseRequest</code> 不需要缩写为 <code>QQBaseReq</code>，在 <strong>Objective-C</strong> 的世界，名字再长都不过份，而要能将类、方法等功能表述清楚；</li>
<li><code>type</code> 应当明确指定类型，就一个 <code>int</code> 让使用者不知所措；</li>
<li><code>QQApiInterfaceReqType</code> 的枚举名应当以 QQApiInterfaceReqType 开头，且以驼峰式命名，方便自动补全。全大写一般是宏定义。</li>
</ol>


<h2>接口及实现</h2>

<p>在编写第三方库时，尽量面向接口编程，并给一个默认的实现，方便使用者扩展。</p>

<p>例如，你实现了一个照片显示的 <strong>View</strong>，你的类定义如下：</p>

<p>```obj-c
@interface MyPhoto : NSObject
@property (nonatomic, strong) UIImage <em>thumbnailImage;
@property (nonatomic, strong) NSString </em>name;
@property (nonatomic, strong) NSURL *originURL;
@end</p>

<p>@interface MyPhotoGalleryView : UIView
@property (nonatomic, strong) NSArray<MyPhoto *> *photos;
@end
```</p>

<p>然而在实际项目中，使用者一般会有自定义的照片对象（如：<code>@class XTPhoto</code>），为了使用你的实现，他不得不将他的对象转成你的，再设置到 <code>photos</code> 属性，造成不必要的内存浪费。</p>

<p>```obj-c
@interface XTPhoto : NSObject
@property (nonatomic, strong) UIImage <em>image;
@property (nonatomic, strong) NSString </em>photoPath;
@end</p>

<p>&hellip;</p>

<p>NSMutableArray <em>photos = [NSMutableArray arrayWithCapacity:self.photoGallery.count];
for (XTPhoto </em>photo in self.photoGallery) {</p>

<pre><code>MyPhoto *my = ...;
[photos addObject:my];
</code></pre>

<p>}
photoGalleryView.photos = [NSArray arrayWithArray:photos];
```</p>

<p>而如果换一种实现，定义一个接口，就可以一定程度上避免这种问题：</p>

<p>```obj-c
@protocol MyPhoto <NSObject>
@required
@property (nonatomic, readonly) UIImage <em>thumbnailImage;
@property (nonatomic, readonly) NSString </em>name;</p>

<p>@optional
@property (nonatomic, readonly) NSURL *originURL;</p>

<p>@end</p>

<p>@interface MyPhoto : NSObject <MyPhoto>
@property (nonatomic, strong) UIImage <em>thumbnailImage;
@property (nonatomic, strong) NSString </em>name;
@property (nonatomic, strong) NSURL *originURL;
@end</p>

<p>@interface MyPhotoGalleryView : UIView
@property (nonatomic, strong) NSArray&lt;id<MyPhoto> > *photos;
@end</p>

<p>@interface XTPhoto : NSObject <MyPhoto>
@property (nonatomic, strong) UIImage <em>image;
@property (nonatomic, strong) NSString </em>photoPath;
@end</p>

<p>@implementation XTPhoto</p>

<ul>
<li><p>(UIImage *)thumbnailImage
{
  return self.image;
}</p></li>
<li><p>(NSString *)name
{
  return self.photoPath.lastPathComponent;
}</p></li>
<li><p>(NSURL *)originURL
{
  return [NSURL URLWithString:self.photoPath];
}
@end
```</p></li>
</ul>


<p>这样可以直接将 <code>self.photoGallery</code> 直接赋值到 <code>photoGalleryView.photos</code>。</p>

<p>除了面向接口编程，在类的实现上也应遵循以下原则：</p>

<ul>
<li><p>保持简单。只向外暴露能实现功能的最少的接口。假如你有一个视图，里面有一个 Label 显示了剩余的金币数，大于 0 时为红色，小于 0 时为绿色，那么应当只暴露一个 <strong>NSInteger</strong> 接口。</p>

<pre><code>  @interface XTStatsView : UIView
  @property (nonatomic, assign) NSInteger numberOfGold;
  @end
</code></pre>

<p>  然后在具体的实现中设置 Label 的值：</p>

<pre><code>  @interface XTStatsView ()
  @property (nonatomic, strong) UILabel *goldLabel;
  @end

  @implementation XTStatsView
  - (void)setNumberOfGold:(NSInteger)numberOfGold
  {
      _numberOfGold = numberOfGold;
      self.goldLabel.text = [NSString stringWithFormat:@"%d 金币", _numberOfGold];
      if (_numberOfGold &gt;= 0) {
          self.goldLabel.textColor = [UIColor redColor];
      }
      else {
          self.goldLabel.textColor = [UIColor greenColor];
      }
  }
  @end
</code></pre>

<p>  一种比较懒的办法是直接暴露 <code>goldLabel</code>，给了使用者较多的灵活性，但也容易造成一些不可预料的结果。</p>

<p>  另外有一些情况属于暴露多余接口，如你自定义了一个 Cell，用来展示某个 Entity 的内容，于是定义如下：</p>

<pre><code>  @interface MyCell: UITableViewCell
  @property (nonatomic, strong) MyEntity *entity;
  - (void)renderData;
  @end
</code></pre>

<p>  使用者设置了 Entity 后还要调用 <code>- (void)renderData</code> 才能显示出来，这其实是多余的，可以去掉 <code>- (void)renderData</code> 而在 Entity 的 <strong>setter</strong> 中内部调用 <code>- (void)renderData</code> 或其他类似的方法。使用者所设置的，即是所看到（所得到）的，不需要再调用其他方法。</p></li>
<li><p>调用顺序无关。如果你实现的类有较多的状态无关的属性，它应该是调用顺序无关的。例如，一个 <strong>VC</strong> 暴露了一个 <code>titleColor</code> 属性，可以设置视图中 Label 的颜色，一个比较常见的错误是如下实现：</p>

<pre><code>  @interface MyViewController: UIViewController
  @property (nonatomic, strong) UIColor *titleColor;
  @end

  @implementation MyViewController
  - (void)viewDidLoad
  {
      [super viewDidLoad];
      self.titleLabel.textColor = self.titleColor;
  }
  @end
</code></pre>

<p>  以上实现的问题在于，如果 <strong>VC</strong> 的视图已经加载，那么设置 <code>titleColor</code> 将无效。正确的实现应该如下：</p>

<pre><code>  @implementation MyViewController
  - (void)viewDidLoad
  {
      [super viewDidLoad];
      self.titleLabel.textColor = self.titleColor;
  }

  - (void)setTitleColor:(UIColor *)titleColor
  {
      if (_titleColor != titleColor) {
          _titleColor = titleColor;
          if (self.isViewLoaded) {
              self.titleLabel.textColor = self.titleColor;
          }
      }
  }
  @end
</code></pre>

<p>  这样保证使用者无论何时设置都是有效的。</p></li>
</ul>


<h2>宏</h2>

<p>合理地使用 <strong>NS</strong> 自带的编译器预处理宏定义可以马上提高整个代码的逼格，如：</p>

<p>```obj-c
UIKIT_EXTERN NSString *const MyUserDidLoginNotification;</p>

<p>@interface MyUser: NSObject
@property (nonatomic, strong) NSString <em>name DEPRECATED_MSG_ATTRIBUTE(&ldquo;Use userName instead!&rdquo;);
@property (nonatomic, strong) NSString </em>userName;</p>

<ul>
<li>(instancetype)initWithName:(NSString <em>)name email:(NSString </em>)email NS_DESIGNATED_INITIALIZER;</li>
<li>(void)reloadData NS_REQUIRES_SUPER;
@end</li>
</ul>


<p>@interface MyUserManager : NSObject
+ (instancetype)sharedManager;</p>

<ul>
<li>(instancetype)init NS_UNAVAILABLE;</li>
</ul>


<p>@end
```</p>

<p>更多宏请参见 <code>&lt;Foundation/NSObjCRuntime.h&gt;</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么你不应该使用 Interface Builder]]></title>
    <link href="http://rickytan.cn/blog/2015/11/23/why-shouldnt-you-use-ib/"/>
    <updated>2015-11-23T13:55:00+08:00</updated>
    <id>http://rickytan.cn/blog/2015/11/23/why-shouldnt-you-use-ib</id>
    <content type="html"><![CDATA[<p><strong>Xcode</strong> 太卡了！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么你应该开始使用 Interface Builder]]></title>
    <link href="http://rickytan.cn/blog/2015/11/23/why-should-you-start-to-use-ib/"/>
    <updated>2015-11-23T11:26:00+08:00</updated>
    <id>http://rickytan.cn/blog/2015/11/23/why-should-you-start-to-use-ib</id>
    <content type="html"><![CDATA[<p>众所周知，用 <strong>Xcode</strong> 开发 <strong>App Watch</strong> 应用只能使用 <code>Interface Builder</code> （以下简称 <strong>IB</strong>），甚至于它的 <strong>API</strong> 中都没有 <code>-(void)init</code> 接口，如下：</p>

<p>``` objective-c
@interface WKInterfaceButton : WKInterfaceObject</p>

<ul>
<li>(void)setTitle:(nullable NSString *)title;</li>
<li><p>(void)setAttributedTitle:(nullable NSAttributedString *)attributedTitle;</p></li>
<li><p>(void)setBackgroundColor:(nullable UIColor *)color;</p></li>
<li>(void)setBackgroundImage:(nullable UIImage *)image;</li>
<li>(void)setBackgroundImageData:(nullable NSData *)imageData;</li>
<li><p>(void)setBackgroundImageNamed:(nullable NSString *)imageName;</p></li>
<li><p>(void)setEnabled:(BOOL)enabled;</p></li>
</ul>


<p>@end
```</p>

<p>另外，在 <strong>Xcode 6</strong> 之后，新增了一个很强的特性 <strong>IBInspectable</strong>，它允许开发者自定义的控件使用 <strong>IB</strong> 来设置参数。</p>

<p>回顾计算机的发展历程，人类一直在为 <strong>WYSIWYG</strong> （所见即所得）做着不懈的努力（当然，程序员有时候会逆其道而行之，比如写文档像码代码的 <a href="https://www.latex-project.org/"><strong>LaTeX</strong></a>），毕竟人是视觉动物。我个人而言是十分崇尚在生产环境中使用 <strong>Xib</strong> 和 <strong>StoryBoard</strong> 的，而 <strong>IBInspectable</strong> 的出现更加坚定了继续使用它们的信心，同时也表明的苹果官方的态度，苹果希望开发者们使用 <strong>IB</strong>。</p>

<p>接下来就说明一下 <strong>IBInspectable</strong> 可以为封装控件带来什么新的启发。<!--more--></p>

<h2><strong>IBInspectable</strong></h2>

<p><strong>IBInspectable</strong> 的使用非常简单，首先定义自己的类，然后在定义的上一行添加 <strong>IB_DESIGNABLE</strong> 宏即可（如果是 <strong>Swift</strong>，使用 <code>@IBDesignable</code>）。这里以本人的开源项目 <a href="https://github.com/rickytan/RTIconButton"><strong>RTIconButton</strong>（https://github.com/rickytan/RTIconButton）</a> 为例：</p>

<p>``` objective-c
typedef NS_ENUM(NSInteger, GSIconPosition) {</p>

<pre><code>GSIconPositionTop       = 0,
GSIconPositionLeft,
GSIconPositionBottom,
GSIconPositionRight
</code></pre>

<p>};</p>

<p>IB_DESIGNABLE
@interface RTIconButton : UIButton
@property (nonatomic, assign) IBInspectable CGFloat iconMargin;
@property (nonatomic, assign) IBInspectable NSInteger iconPosition;
@property (nonatomic, assign) IBInspectable CGSize iconSize;    // default is image size;
@end
```</p>

<p>然后在需要使用 <strong>IB</strong> 来设置值的属性上添加 <strong>IBInspectable</strong> 宏。这个并不是什么新的黑科技，事实上它只是告诉了 <strong>Xcode</strong> 使用 <strong>Runtime Attribute</strong> 来设置它的值。</p>

<p><img src="/images/use-ib/0.png" alt="" /></p>

<p>所以它支持的属性类型也是有限的，只有以下几种（不支持 <strong>UIFont</strong> 和 <strong>ENUM</strong>，所以本项目中的 <code>iconPosition</code> 使用了 <code>NSInteger</code>），但也基本够用：</p>

<ul>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Localized String</li>
<li>Point</li>
<li>Size</li>
<li>Rect</li>
<li>Range</li>
<li>Color</li>
<li>Image</li>
<li>Nil</li>
</ul>


<p>上面的代码中，三个属性都定义为可以使用 <strong>IB</strong>，那么当你拖拽一个 <strong>UIButton</strong> 到界面上，设置它的 <strong>Class</strong> 为 <strong>RTIconButton</strong> 后，<strong>Xcode</strong> 的 <strong>Attributes Inspector</strong> 面板会多出如下几个可设置的项目：</p>

<p><img src="/images/use-ib/1.png" alt="" /></p>

<p>如果不设置，它将使用默认值，即代码在 <code>-(void)init</code> 时自己设置的值。这里需要注意的是，从 <strong>IB</strong> 生成的界面调用的是 <code>- (instancetype)initWithCoder:(NSCoder *)aDecoder</code>，所以通常的做法写一个 <code>-(void)commonInit</code> 之类的。</p>

<p>``` objective-c
&ndash; (void)commonInit
{</p>

<pre><code>self.iconSize = CGSizeZero;
</code></pre>

<p>}</p>

<ul>
<li><p>(instancetype)initWithCoder:(NSCoder *)aDecoder
{
  self = [super initWithCoder:aDecoder];
  if (self) {
      [self commonInit];
  }
  return self;
}</p></li>
<li><p>(instancetype)initWithFrame:(CGRect)frame
{
  self = [super initWithFrame:frame];
  if (self) {
      [self commonInit];
  }
  return self;
}
```</p></li>
</ul>


<h2><code>intrinsicContentSize</code></h2>

<p>其次，为了支持 <strong>NSLayoutConstraint</strong>，一定要实现 <code>- (CGSize)intrinsicContentSize</code> 方法，否则在运行时，控件的 <strong>size</strong> 会发生改变：</p>

<p>``` objective-c
&ndash; (CGSize)intrinsicContentSize
{</p>

<pre><code>CGRect contentRect = [self contentRectForBounds:self.bounds];
</code></pre>

<h1>pragma clang diagnostic push</h1>

<h1>pragma clang diagnostic ignored &ldquo;-Wdeprecated&rdquo;</h1>

<pre><code>CGSize titleSize = [[self titleForState:self.state] sizeWithFont:self.font];
</code></pre>

<h1>pragma clang diagnostic pop</h1>

<pre><code>CGSize imageSize = CGSizeEqualToSize(self.iconSize, CGSizeZero) ? [super imageRectForContentRect:contentRect].size : self.iconSize;

switch (_iconPosition) {
    case GSIconPositionTop:
    case GSIconPositionBottom:
        return CGSizeMake(MAX(titleSize.width, imageSize.width), titleSize.height + imageSize.height + self.iconMargin);

        break;
    default:
        return CGSizeMake(titleSize.width + imageSize.width + self.iconMargin, MAX(titleSize.height, imageSize.height));
        break;
}
</code></pre>

<p>}</p>

<ul>
<li>(CGSize)sizeThatFits:(CGSize)size
{
  return [self intrinsicContentSize];
}
```</li>
</ul>


<p>本项目解决了 <strong>Icon</strong> 与 <strong>Title</strong> 混排的一些常见需求，支持设置间距、调整 <strong>Icon</strong> 大小、<strong>Icon</strong> 位置，及水平和竖直方向对齐，并且所有的设置所见即所得！</p>

<p><img src="/images/use-ib/2.png" alt="" /></p>

<p>所有源代码可以在 <a href="https://github.com/rickytan/RTIconButton">https://github.com/rickytan/RTIconButton</a> 上找到。</p>

<p>目前已知问题：</p>

<ol>
<li>如果设置了 <strong>Shows Touch On Highlight</strong>（即点上去发白光的那个属性），白光可能不在正中间</li>
</ol>


<hr />

<p>这就完了吗？并没有！有些控件需要 <strong>Delegate</strong> 提供数据源，在真正运行前是看不到样子的怎么办？其实也可以让它们可见，至少来说部分可见。同时，这里以本人的另一个项目 <a href="https://github.com/rickytan/RSlideView"><strong>RSlideView</strong></a> 为例：</p>

<p>``` objective-c
IB_DESIGNABLE
@interface RSlideView : UIView
// 这里省略了不支持 IB 的属性
@property (nonatomic, assign, getter = isLoopSlide) IBInspectable BOOL loopSlide;
@property (nonatomic, assign, getter = isContinuousScroll) IBInspectable BOOL continuousScroll;
@property (nonatomic, assign, getter = isPageControlHidden) IBInspectable BOOL pageControlHidden;   // Default YES
@property (nonatomic, assign) IBInspectable UIColor *pageControlBackgroundColor;
@property (nonatomic, assign) IBInspectable CGSize pageSize;  // Default to be the RSlideView&rsquo;s size</p>

<pre><code>// The Gap between two pages, default to be 0
</code></pre>

<p>@property (nonatomic, assign) IBInspectable CGFloat pageMargin;
@end
```</p>

<p>本项目提供一个可以循环滚动的 <strong>Banner</strong> 控件，但是在运行前没有任何数据可以生成 <strong>Banner</strong>，我们可以覆盖 <code>- (void)drawRect:(CGRect)rect</code> 方法将 <strong>Banner</strong> 的布局样子绘制出来：</p>

<p>``` objective-c</p>

<h1>if TARGET_INTERFACE_BUILDER</h1>

<ul>
<li><p>(void)drawRect:(CGRect)rect
{
  // Drawing code
  if (CGSizeEqualToSize(<em>pageSize, CGSizeZero)) {
      </em>pageSize = self.bounds.size;
  }
  [self updateVisibalePages];</p>

<p>  CGSize size = CGSizeMake(<em>pageSize.width + </em>pageMargin, _pageSize.height);</p>

<p>  CGRect scrollRect = CGRectMake((CGRectGetWidth(self.bounds) &ndash; <em>pageSize.width &ndash; </em>pageMargin) / 2,
                                 (CGRectGetHeight(self.bounds) &ndash; <em>pageSize.height) / 2,
                                 self.pageSize.width + </em>pageMargin, _pageSize.height);</p>

<p>  NSDictionary *attri = @{NSFontAttributeName: [UIFont systemFontOfSize:13],
                          NSForegroundColorAttributeName: [UIColor darkTextColor]};</p>

<p>  NSInteger start = self.loopSlide ? &ndash;<em>extraPagesForLoopShow : 0;
  for (NSInteger i = start; i &lt;= </em>extraPagesForLoopShow; ++i) {
      [[UIColor grayColor] setStroke];
      [[UIColor colorWithWhite:0.9 alpha:1.0] setFill];</p>

<pre><code>  CGRect rect = CGRectMake(_pageMargin / 2 + size.width * i,
                           (size.height - _pageSize.height) / 2,
                           _pageSize.width, _pageSize.height);
  rect = CGRectOffset(rect, scrollRect.origin.x, scrollRect.origin.y);
  UIBezierPath *path = [UIBezierPath bezierPathWithRect:rect];
  [path stroke];
  [path fill];
  NSString *page = [NSString stringWithFormat:@"Page %s%ld", self.loopSlide &amp;&amp; i &lt; 0 ? "N" : "", i];
  CGSize textSize = [page sizeWithAttributes:attri];
  CGPoint textPoint = CGPointMake(CGRectGetMidX(rect) - textSize.width / 2, CGRectGetMidY(rect) - textSize.height / 2);
  [page drawAtPoint:textPoint
     withAttributes:attri];
</code></pre>

<p>  }</p>

<p>  self.pageControl.numberOfPages = MIN(10, _extraPagesForLoopShow * 2 + 1);
  self.pageControl.title = @&ldquo;Page 0&rdquo;;
}</p>

<h1>endif</h1>

<p>```</p></li>
</ul>


<p>于是得到以下结果，我们没有数据也可以看到有数据后它们应该有的布局了！</p>

<p><img src="/images/use-ib/3.png" alt="" /></p>

<p>你可以调整 <strong>pageSize</strong>，<strong>pageMargin</strong> 等属性，同样所见即所得！</p>

<blockquote><p>这里需要注意的是，我们并不需要在真正使用这个控件的时候出现绘制的边框，所以代码需要用 <strong>TARGET_INTERFACE_BUILDER</strong> 宏包起来，告诉编译器，只在使用 <strong>IB</strong> 时编译这段代码。</p></blockquote>

<h2>结语</h2>

<p>所以为什么还不使用 <strong>IB</strong> 呢？所见即所得不应该成为程序员的终极目标么？赶紧拿出你之前写的代码做一次最佳实践吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[是时候使用 PDF 资源了]]></title>
    <link href="http://rickytan.cn/blog/2015/11/06/time-to-use-pdf-assets/"/>
    <updated>2015-11-06T17:56:00+08:00</updated>
    <id>http://rickytan.cn/blog/2015/11/06/time-to-use-pdf-assets</id>
    <content type="html"><![CDATA[<p>一年前我做了这个插件 <a href="https://github.com/rickytan/RTImageAssets">RTImageAssets</a>，为了解决自己在开发过
程中的一个痛点，这个痛点貌似也恰好是许多其他 iOS 开发者的痛点，那就是要不断地向美术解释如何正确切图。</p>

<p>于是一时间也获得了不少反馈，但这始终只是个临时解决办法。事实上从 <strong>Xcode 6</strong> 开始就已经支持使用 PDF
矢量图了。现在 iOS 设备越来越多，谁知道以后需要支持什么样的屏幕，而矢量图正是解决这一问题的良策。<!--more-->另外，很多同行反应从 @3x 的图生成的 @2x 的图点用的磁盘空间还大些，这其实是色彩空间和 PNG
压缩算法决定的，我也没有时间深入研究这个，开发这个插件的目的只是让它有 @2x 的图以保证运行时图片大小跟
期望的一致，事实上 <strong>Xcode</strong> 在打包时会自动优化 PNG 图片。所以终极解决方案，还是从现在开始，全部使用矢量图吧！</p>

<p>如果对 PNG 图片压缩有兴趣，相关信息可以在 <a href="https://tinypng.com/">https://tinypng.com/</a> 和 <a href="https://imageoptim.com/">https://imageoptim.com/</a> 上找到。</p>

<p>使用矢量图的方法跟普通 PNG 一样，按下图设置好后，原来的三个槽会变成一个，重新把图片拖进去就好：</p>

<p><img src="/images/pdf-asset/1.png" alt="image0" /></p>

<p>一定要选为 <em>Vector</em> ，之前碰到过将 <strong>PDF</strong> 图当 <strong>PNG</strong> 用的人……</p>

<p>这样一来，无需再担心屏幕的分辨率问题，随着 <strong>Xcode</strong> 的更新，它会自动加入所需的分辨率。</p>

<p>你不需要担心移动设置上使用矢量图的性能问题，因为事实上在打包的时候 <strong>Xcode</strong> 将它们变成 PNG 了：</p>

<p><img src="/images/pdf-asset/2.png" alt="image1" /></p>

<blockquote><p><em>最低支持到 <strong>iOS 6</strong> 时，会使用原始 PNG 图，可以看到以上的命名方式，<strong>iOS 7</strong> 以上已经将所有图片打包为 <code>Assets.car</code> 了</em></p></blockquote>

<p>关于矢量图的生成问题，如果美术会使用 <a href="http://www.sketchcn.com/">Sketch</a> ，那么它对生成  PDF 等十分友好，如果 TA 不会用 Sketch，你是时候招个新的了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode 中如何自动增长 Build 号]]></title>
    <link href="http://rickytan.cn/blog/2014/09/28/xcode-build-number/"/>
    <updated>2014-09-28T19:46:00+08:00</updated>
    <id>http://rickytan.cn/blog/2014/09/28/xcode-build-number</id>
    <content type="html"><![CDATA[<h2>iTunes Connect 新步骤</h2>

<p>随着 iOS8 的推出，苹果 itunes connect 中上传新应用多了一个新步骤：测试。</p>

<p>几个月前听闻 Apple 收购 <a href="https://testflightapp.com">TestFlight</a>，但一直没有看到任何变化，如今 TestFlight 已经集成到新应用的发布
、审核过程中了。打开 <a href="https://itunesconnect.apple.com">iTunesConnect</a>，可以看到在 <code>Versions</code> 旁边新
增了一个 <code>Prerelease</code> 标签页。原先通过 <code>XCode</code> 上传的应用会直接进入苹果的审核队列中，现在它会先出现
在这里，这里其实就是一个 <code>TestFlight</code> 的功能，你可以在 <strong><em>Users and Roles</em></strong> 中增加测试人员的 <em>Apple ID</em>，
然后在 <code>Prerelease</code> 下的 <code>Internal Testers</code> 中可以看到。每上传一个新的 <strong><em>Build</em></strong>，苹果会自动发邮件给
测试人员，测试人号点开邮件中的链接，在 <code>Safari</code> 中打开，然后 <code>Safari</code> 会打开设备上的 <code>Test Flight</code>，
开始自动下载应用进行测试。</p>

<!--more-->


<p>这样的好处很明显，正在进行测试的版本与正式上线的版本是完全一样的，因为原来我们要做测试可能测试版与正式
版使用了不同的签名证书，然后每次加新人又要添加设备 <code>UDID</code> 到 <strong><em>Provisioning Profile</em></strong> 等等。</p>

<p>测试通过之后，回到 <code>iTunesConnect</code> 中的 <code>Versions</code>，下拉找到 <code>Build</code>，选择刚刚测试好的 <strong><em>Build</em></strong> 号，
点 <code>Save</code>，然后就可以进入正常的审核队列了。</p>

<blockquote><p><strong><em>注意：</em></strong>测试功能只有使用苹果开发者网站最近生成的 <strong><em>Provisioning Profile</em></strong> 才能开启，而且会自
动加入，不要去 <strong><em>Entitlement</em></strong> 中勾选了。</p></blockquote>

<h2>Build 号</h2>

<p>在 <code>iOS</code> 应用的 <code>Info.plist</code> 中有两个版本号，即 <strong><em>Version</em></strong> 和 <strong><em>Build</em></strong>，对应键值为 <code>CFBundleShortVersionString</code> 和 <code>CFBundleVersion</code>。
一个是应用程序本身发布时的版本号，一个是表示这个发布版的二进制代码是第几次编译得到的。在 <strong><em>iOS8</em></strong>
之前由于苹果并没有约束这两者的关系，本人一般就把两个填一样的，如 <code>2.1.4</code> 等，也一直没出过问题，但是
最近由于苹果加入了测试功能，所有上传的 <strong><em>Build</em></strong> 都会保存，然后第一个因为某原因审核不过，再上传第
二个就出现了 <strong><em>Build</em></strong> 号冲突的问题。于是想到这才是 <strong><em>Build</em></strong> 的正确使用方法，它本应该是个整数，
在 <strong><em>Version</em></strong> 保持不变，<strong><em>Build</em></strong> 应该是要随着编译次数增长的！</p>

<h2>自动增长</h2>

<p>那么如何让 <strong><em>Build</em></strong> 号自动增加呢？很早前搜到过一段代码，现在可以用上了：</p>

<ol>
<li><p>在 <code>XCode</code> 中选中项目，打开 <code>Build Phases</code>，如下图：</p>

<p> <img src="/images/run-script.png" alt="RunScript" /></p></li>
<li><p>点 “+” 增加一个过程，选择“Run Script”，移到“Link Binary With Libraries”之后，并贴入以下代码：</p>

<p> <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;buildNumber<span class="o">=</span><span class="k">$(</span>/usr/libexec/PlistBuddy -c &amp;ldquo;Print CFBundleVersion&amp;rdquo; &amp;ldquo;<span class="nv">$INFOPLIST_FILE</span>&amp;rdquo;<span class="k">)</span>
</span><span class='line'><span class="nv">buildNumber</span><span class="o">=</span><span class="k">$((</span><span class="nv">$buildNumber</span> <span class="o">+</span> <span class="m">1</span><span class="k">))</span>
</span><span class='line'>/usr/libexec/PlistBuddy -c &amp;ldquo;Set :CFBundleVersion <span class="nv">$buildNumber</span>&amp;rdquo; &amp;ldquo;<span class="nv">$INFOPLIST_FILE</span>&amp;rdquo;
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
